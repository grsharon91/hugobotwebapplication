//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace HugoBotWebApplication.Discretistation {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FileHandlerSoap", Namespace="http://tempuri.org/")]
    public partial class FileHandler : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadEntitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEntitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DiscretizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsDatasetExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendDatasetAndVmapToServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDatasetWholeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExpertDiscretizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFileExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClassesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChunksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FileHandler() {
            this.Url = global::HugoBotWebApplication.Properties.Settings.Default.HugoBotWebApplication_Discretistation_FileHandler;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadEntitiesCompletedEventHandler UploadEntitiesCompleted;
        
        /// <remarks/>
        public event GetEntitiesCompletedEventHandler GetEntitiesCompleted;
        
        /// <remarks/>
        public event DiscretizationCompletedEventHandler DiscretizationCompleted;
        
        /// <remarks/>
        public event IsDatasetExistsCompletedEventHandler IsDatasetExistsCompleted;
        
        /// <remarks/>
        public event SendDatasetAndVmapToServerCompletedEventHandler SendDatasetAndVmapToServerCompleted;
        
        /// <remarks/>
        public event UploadDatasetWholeCompletedEventHandler UploadDatasetWholeCompleted;
        
        /// <remarks/>
        public event GetFileCompletedEventHandler GetFileCompleted;
        
        /// <remarks/>
        public event ExpertDiscretizationCompletedEventHandler ExpertDiscretizationCompleted;
        
        /// <remarks/>
        public event IsFileExistsCompletedEventHandler IsFileExistsCompleted;
        
        /// <remarks/>
        public event GetClassesCompletedEventHandler GetClassesCompleted;
        
        /// <remarks/>
        public event GetChunksCompletedEventHandler GetChunksCompleted;
        
        /// <remarks/>
        public event GetChunkCompletedEventHandler GetChunkCompleted;
        
        /// <remarks/>
        public event GetStatesCompletedEventHandler GetStatesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadEntities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadEntities(string guid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] entities) {
            this.Invoke("UploadEntities", new object[] {
                        guid,
                        entities});
        }
        
        /// <remarks/>
        public void UploadEntitiesAsync(string guid, byte[] entities) {
            this.UploadEntitiesAsync(guid, entities, null);
        }
        
        /// <remarks/>
        public void UploadEntitiesAsync(string guid, byte[] entities, object userState) {
            if ((this.UploadEntitiesOperationCompleted == null)) {
                this.UploadEntitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadEntitiesOperationCompleted);
            }
            this.InvokeAsync("UploadEntities", new object[] {
                        guid,
                        entities}, this.UploadEntitiesOperationCompleted, userState);
        }
        
        private void OnUploadEntitiesOperationCompleted(object arg) {
            if ((this.UploadEntitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadEntitiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEntities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetEntities(string guid) {
            object[] results = this.Invoke("GetEntities", new object[] {
                        guid});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEntitiesAsync(string guid) {
            this.GetEntitiesAsync(guid, null);
        }
        
        /// <remarks/>
        public void GetEntitiesAsync(string guid, object userState) {
            if ((this.GetEntitiesOperationCompleted == null)) {
                this.GetEntitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEntitiesOperationCompleted);
            }
            this.InvokeAsync("GetEntities", new object[] {
                        guid}, this.GetEntitiesOperationCompleted, userState);
        }
        
        private void OnGetEntitiesOperationCompleted(object arg) {
            if ((this.GetEntitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEntitiesCompleted(this, new GetEntitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Discretization", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Discretization(string path) {
            object[] results = this.Invoke("Discretization", new object[] {
                        path});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DiscretizationAsync(string path) {
            this.DiscretizationAsync(path, null);
        }
        
        /// <remarks/>
        public void DiscretizationAsync(string path, object userState) {
            if ((this.DiscretizationOperationCompleted == null)) {
                this.DiscretizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiscretizationOperationCompleted);
            }
            this.InvokeAsync("Discretization", new object[] {
                        path}, this.DiscretizationOperationCompleted, userState);
        }
        
        private void OnDiscretizationOperationCompleted(object arg) {
            if ((this.DiscretizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DiscretizationCompleted(this, new DiscretizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsDatasetExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsDatasetExists([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileByteStream, out string hex) {
            object[] results = this.Invoke("IsDatasetExists", new object[] {
                        fileByteStream});
            hex = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsDatasetExistsAsync(byte[] fileByteStream) {
            this.IsDatasetExistsAsync(fileByteStream, null);
        }
        
        /// <remarks/>
        public void IsDatasetExistsAsync(byte[] fileByteStream, object userState) {
            if ((this.IsDatasetExistsOperationCompleted == null)) {
                this.IsDatasetExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsDatasetExistsOperationCompleted);
            }
            this.InvokeAsync("IsDatasetExists", new object[] {
                        fileByteStream}, this.IsDatasetExistsOperationCompleted, userState);
        }
        
        private void OnIsDatasetExistsOperationCompleted(object arg) {
            if ((this.IsDatasetExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsDatasetExistsCompleted(this, new IsDatasetExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendDatasetAndVmapToServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendDatasetAndVmapToServer(string datasetName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileByteStream, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] vmap) {
            object[] results = this.Invoke("SendDatasetAndVmapToServer", new object[] {
                        datasetName,
                        fileByteStream,
                        vmap});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendDatasetAndVmapToServerAsync(string datasetName, byte[] fileByteStream, byte[] vmap) {
            this.SendDatasetAndVmapToServerAsync(datasetName, fileByteStream, vmap, null);
        }
        
        /// <remarks/>
        public void SendDatasetAndVmapToServerAsync(string datasetName, byte[] fileByteStream, byte[] vmap, object userState) {
            if ((this.SendDatasetAndVmapToServerOperationCompleted == null)) {
                this.SendDatasetAndVmapToServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendDatasetAndVmapToServerOperationCompleted);
            }
            this.InvokeAsync("SendDatasetAndVmapToServer", new object[] {
                        datasetName,
                        fileByteStream,
                        vmap}, this.SendDatasetAndVmapToServerOperationCompleted, userState);
        }
        
        private void OnSendDatasetAndVmapToServerOperationCompleted(object arg) {
            if ((this.SendDatasetAndVmapToServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendDatasetAndVmapToServerCompleted(this, new SendDatasetAndVmapToServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDatasetWhole", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadDatasetWhole(string datasetName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileByteStream, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] vmap, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] entities) {
            object[] results = this.Invoke("UploadDatasetWhole", new object[] {
                        datasetName,
                        fileByteStream,
                        vmap,
                        entities});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDatasetWholeAsync(string datasetName, byte[] fileByteStream, byte[] vmap, byte[] entities) {
            this.UploadDatasetWholeAsync(datasetName, fileByteStream, vmap, entities, null);
        }
        
        /// <remarks/>
        public void UploadDatasetWholeAsync(string datasetName, byte[] fileByteStream, byte[] vmap, byte[] entities, object userState) {
            if ((this.UploadDatasetWholeOperationCompleted == null)) {
                this.UploadDatasetWholeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDatasetWholeOperationCompleted);
            }
            this.InvokeAsync("UploadDatasetWhole", new object[] {
                        datasetName,
                        fileByteStream,
                        vmap,
                        entities}, this.UploadDatasetWholeOperationCompleted, userState);
        }
        
        private void OnUploadDatasetWholeOperationCompleted(object arg) {
            if ((this.UploadDatasetWholeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDatasetWholeCompleted(this, new UploadDatasetWholeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFile(string fileNames) {
            object[] results = this.Invoke("GetFile", new object[] {
                        fileNames});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileAsync(string fileNames) {
            this.GetFileAsync(fileNames, null);
        }
        
        /// <remarks/>
        public void GetFileAsync(string fileNames, object userState) {
            if ((this.GetFileOperationCompleted == null)) {
                this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
            }
            this.InvokeAsync("GetFile", new object[] {
                        fileNames}, this.GetFileOperationCompleted, userState);
        }
        
        private void OnGetFileOperationCompleted(object arg) {
            if ((this.GetFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExpertDiscretization", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExpertDiscretization(string path, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] cutpoints) {
            object[] results = this.Invoke("ExpertDiscretization", new object[] {
                        path,
                        cutpoints});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExpertDiscretizationAsync(string path, byte[] cutpoints) {
            this.ExpertDiscretizationAsync(path, cutpoints, null);
        }
        
        /// <remarks/>
        public void ExpertDiscretizationAsync(string path, byte[] cutpoints, object userState) {
            if ((this.ExpertDiscretizationOperationCompleted == null)) {
                this.ExpertDiscretizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExpertDiscretizationOperationCompleted);
            }
            this.InvokeAsync("ExpertDiscretization", new object[] {
                        path,
                        cutpoints}, this.ExpertDiscretizationOperationCompleted, userState);
        }
        
        private void OnExpertDiscretizationOperationCompleted(object arg) {
            if ((this.ExpertDiscretizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExpertDiscretizationCompleted(this, new ExpertDiscretizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsFileExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsFileExists(string fileName) {
            object[] results = this.Invoke("IsFileExists", new object[] {
                        fileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsFileExistsAsync(string fileName) {
            this.IsFileExistsAsync(fileName, null);
        }
        
        /// <remarks/>
        public void IsFileExistsAsync(string fileName, object userState) {
            if ((this.IsFileExistsOperationCompleted == null)) {
                this.IsFileExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFileExistsOperationCompleted);
            }
            this.InvokeAsync("IsFileExists", new object[] {
                        fileName}, this.IsFileExistsOperationCompleted, userState);
        }
        
        private void OnIsFileExistsOperationCompleted(object arg) {
            if ((this.IsFileExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFileExistsCompleted(this, new IsFileExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClasses", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetClasses(string path) {
            object[] results = this.Invoke("GetClasses", new object[] {
                        path});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetClassesAsync(string path) {
            this.GetClassesAsync(path, null);
        }
        
        /// <remarks/>
        public void GetClassesAsync(string path, object userState) {
            if ((this.GetClassesOperationCompleted == null)) {
                this.GetClassesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClassesOperationCompleted);
            }
            this.InvokeAsync("GetClasses", new object[] {
                        path}, this.GetClassesOperationCompleted, userState);
        }
        
        private void OnGetClassesOperationCompleted(object arg) {
            if ((this.GetClassesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClassesCompleted(this, new GetClassesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetChunks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetChunks(string path) {
            object[] results = this.Invoke("GetChunks", new object[] {
                        path});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetChunksAsync(string path) {
            this.GetChunksAsync(path, null);
        }
        
        /// <remarks/>
        public void GetChunksAsync(string path, object userState) {
            if ((this.GetChunksOperationCompleted == null)) {
                this.GetChunksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChunksOperationCompleted);
            }
            this.InvokeAsync("GetChunks", new object[] {
                        path}, this.GetChunksOperationCompleted, userState);
        }
        
        private void OnGetChunksOperationCompleted(object arg) {
            if ((this.GetChunksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChunksCompleted(this, new GetChunksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetChunk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetChunk(string path) {
            object[] results = this.Invoke("GetChunk", new object[] {
                        path});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetChunkAsync(string path) {
            this.GetChunkAsync(path, null);
        }
        
        /// <remarks/>
        public void GetChunkAsync(string path, object userState) {
            if ((this.GetChunkOperationCompleted == null)) {
                this.GetChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChunkOperationCompleted);
            }
            this.InvokeAsync("GetChunk", new object[] {
                        path}, this.GetChunkOperationCompleted, userState);
        }
        
        private void OnGetChunkOperationCompleted(object arg) {
            if ((this.GetChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChunkCompleted(this, new GetChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetStates(string path) {
            object[] results = this.Invoke("GetStates", new object[] {
                        path});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStatesAsync(string path) {
            this.GetStatesAsync(path, null);
        }
        
        /// <remarks/>
        public void GetStatesAsync(string path, object userState) {
            if ((this.GetStatesOperationCompleted == null)) {
                this.GetStatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatesOperationCompleted);
            }
            this.InvokeAsync("GetStates", new object[] {
                        path}, this.GetStatesOperationCompleted, userState);
        }
        
        private void OnGetStatesOperationCompleted(object arg) {
            if ((this.GetStatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatesCompleted(this, new GetStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void UploadEntitiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetEntitiesCompletedEventHandler(object sender, GetEntitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEntitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEntitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void DiscretizationCompletedEventHandler(object sender, DiscretizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DiscretizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DiscretizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void IsDatasetExistsCompletedEventHandler(object sender, IsDatasetExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsDatasetExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsDatasetExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string hex {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void SendDatasetAndVmapToServerCompletedEventHandler(object sender, SendDatasetAndVmapToServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendDatasetAndVmapToServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendDatasetAndVmapToServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void UploadDatasetWholeCompletedEventHandler(object sender, UploadDatasetWholeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDatasetWholeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDatasetWholeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetFileCompletedEventHandler(object sender, GetFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void ExpertDiscretizationCompletedEventHandler(object sender, ExpertDiscretizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExpertDiscretizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExpertDiscretizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void IsFileExistsCompletedEventHandler(object sender, IsFileExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFileExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFileExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetClassesCompletedEventHandler(object sender, GetClassesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClassesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClassesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetChunksCompletedEventHandler(object sender, GetChunksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChunksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChunksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetChunkCompletedEventHandler(object sender, GetChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetStatesCompletedEventHandler(object sender, GetStatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591