@model HugoBotWebApplication.ViewModels.DiscretizationExistingViewModel

@{
    ViewBag.Title = "Temporal Abstraction";
    ViewBag.Params = "aaa";
    HtmlHelper.ClientValidationEnabled = false;
    HtmlHelper.UnobtrusiveJavaScriptEnabled = false;
}


<style>
    .table > tbody > tr > td,
    .table > tbody > tr > th {
        border-top: none;
    }

    .glyphicon.glyphicon-asterisk {
        font-size: 10px;
    }

    #hide input[type=file] {
        display: none;
        margin: 10px;
    }

        #hide input[type=file] + label {
            display: inline-block;
            margin: 20px;
            padding: 4px 32px;
            background-color: #FFFFFF;
            border: solid 1px #666F77;
            border-radius: 6px;
            color: #666F77;
        }

        #hide input[type=file]:active + label {
            background-image: none;
            background-color: #2D6C7A;
            color: #FFFFFF;
        }

    #Path input[type=file] {
        display: none;
        margin: 10px;
    }

        #Path input[type=file] + label {
            display: inline-block;
            margin: 20px;
            padding: 4px 32px;
            background-color: #FFFFFF;
            border: solid 1px #666F77;
            border-radius: 6px;
            color: #666F77;
        }

        #Path input[type=file]:active + label {
            background-image: none;
            background-color: #2D6C7A;
            color: #FFFFFF;
        }

    .wrap {
        width: 100%;
        height: 30px;
        z-index: -2;
        white-space: nowrap;
        overflow: hidden;
    }

        .wrap div:first-child {
            margin-left: -2%;
        }

        .wrap div {
            margin-left: 1%;
        }

    .prog {
        margin: 0;
        margin-left: 0.5%;
        height: 30px;
        width: 25%;
        position: relative;
        display: inline-block;
        text-align: center;
        color: white;
        line-height: 30px;
        transition: all 0.8s;
    }

        .prog:before,
        .prog:after {
            content: "";
            position: absolute;
            transition: all 0.8s;
            z-index: -1;
        }

        .prog:before {
            height: 50%;
            width: 100%;
            top: 0;
            left: 0;
            background: rgb(57,73,90);
            -webkit-transform: skew(45deg);
            -moz-transform: skew(45deg);
            transform: skew(45deg);
        }

        .prog:after {
            height: 50%;
            width: 100%;
            top: 50%;
            left: 0;
            background: rgb(57,73,90);
            -webkit-transform: skew(-45deg);
            -moz-transform: skew(-45deg);
            transform: skew(-45deg);
        }
</style>

@using (Html.BeginForm("Edit", "Datasets", FormMethod.Post, new { enctype = "multipart/form-data", id = "UploadDatasetForm", name = "UploadDatasetForm" }))

{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.DatasetID)
    <input type="text" id="AbstractionMethods" name="AbstractionMethods" value="" style="display:none" />

    <div class="wrap">
    <div class="prog">
        <a href="@Url.Action("Details", "Datasets", new { id = @Model.DatasetID})" class="btn" style="color: white"> <b style="color: tomato"> @Model.Dataset.DatasetName  </b> Info </a>
    </div>
    <div class="prog">
        <a href="@Url.Action("Edit", "Discretizations", new { id = @Model.DatasetID})" class="btn" style="color: white">Temporal Abstraction </a>
    </div>
    <div class="prog">
        <a href="@Url.Action("Index", "KarmaLego", new { id = @Model.DatasetID})" class="btn" style="color: white"> Time Intervals Mining</a>
    </div>
    <div class="prog">
        <a class="btn" style="color: white"> Visualization </a>
    </div>
</div>
    <br />
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-primary font-weight-light" style="color:white">
                    Temporal Abstraction
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="card align-items-center h-100">
                                <br />
                                <div id="windowSizeDiv" class="form-group">
                                    <label class="" for="WindowSize" data-toggle="tooltip" data-placemenat="left" title="The size of each frame  in a PAA(Piecewise Aggregate Approximation) for the data(window size of value , won't approximate using paa)">PAA Window size</label>
                                    <input type="number" value="1" class="form-control text-box single-line" id="WindowSize" name="WindowSize" data-toggle="tooltip" data-placement="left" title="The size of each frame  in a PAA(Piecewise Aggregate Approximation) for the data(window size of value , won't approximate using paa)" />
                                    <small id="windowSizeHelp" class="form-text text-muted">Window size must be at least 1</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card align-items-center h-100">
                                <div id="abstractionMethodsDiv" class="form-group" style="padding: 14px">
                                    <label class="" for="abstractionMethodsDropdownList">Abstraction method</label>
                                    <select id="abstractionMethodsDropdownList" class="form-control" onchange="methodChanged()">
                                        <option value="EQF" data-toggle="tooltip" title=" The states’ cutoffs are defined by an equal distribution of values">Equal Frequency</option>
                                        <option value="EQW" data-toggle="tooltip" title="The states’ cutoffs are defined by an	equal division of the values range">Equal Width</option>
                                        <option value="PERSIST" data-toggle="tooltip" title="A supervised univariate discretization method for maximal time intervals">Persist</option>
                                        <option value="KMEANS" data-toggle="tooltip" title="algorithm with uniform initialization and Manhattan distance used to obtain K clusters">Kmeans</option>
                                        <option value="SAX" data-toggle="tooltip" title="First convert the time series to PAA representation, then covert the PAA to symbols">SAX</option>
                                        <option value="EXPERT">Knowledge Based</option>
                                        <option value="TD4C" id="TD4C" data-toggle="tooltip" disabled="disabled" title="Can't use this algorithm since the dataset has no class">TD4C_Cosine</option>
                                        <option value="TD4C" id="TD4C1" data-toggle="tooltip" disabled="disabled" title="Can't use this algorithm since the dataset has no class">TD4C_Entropy</option>
                                        <option value="TD4C" id="TD4C2" data-toggle="tooltip" disabled="disabled" title="Can't use this algorithm since the dataset has no class">TD4C_KullbackLiebler</option>


                                    </select>
                                </div>

                                <div id="binsNumberDiv" class="form-group ">

                                    <label class="" for="BinsNumber" data-toggle="tooltip" data-placement="top" title="Number of states to use for the abstraction">Number of states</label>
                                    <input class="form-control text-box single-line" id="BinsNumber" name="BinsNumber" type="number" value="2" data-toggle="tooltip" data-placement="left" title="Number of states to use for the abstraction">
                                    <small id="binsNumberHelp" class="form-text text-muted">Number of states must be at least 2</small>
                                </div>
                                <div id="statesFileDiv" class="form-group " style="display:none">
                                    <label class="" for="statesFile">States file</label>

                                    <div id="statesFile" style="display: inline">
                                        <label style="font-size: 17px" class="btn btn-warning">
                                            <span id="Path1">Browse</span>
                                            <input id="Path" accept=".csv" type="file" name="Path" class="btn btn-success" style="display: none;" />
                                        </label>
                                        <label class="label label-primary" id="filePath" style="display:none;font-size: 16px"></label>
                                        <span id="Dataset_file_error"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card align-items-center h-100">
                                <br />
                                <div id="maxGapDiv" class="form-group">
                                    <label class="" for="MaxGap" data-toggle="tooltip" data-placement="left" title="An interpolation gap for decding the maximunm gap between 2 time points in order to connect them and create an interval">Interpolation gap</label>
                                    <input class="form-control text-box single-line" value="-1" id="MaxGap" name="MaxGap" type="number" data-toggle="tooltip" data-placement="left" title="An interpolation gap for decding the maximunm gap between 2 time points in order to connect them and create an interval" />
                                    <small id="maxGaprHelp" class="form-text text-muted">Interpolation gap must be at least -1</small>
                                </div>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="btn-group" role="group" aria-label="...">
                        <button type="button" class="btn btn-outline-primary" onclick="addConfiguration()">
                            <span class="fas fa-plus"></span>
                            Add configuration
                        </button>
                    </div>
                    <span id="sendingText">

                    </span>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <div id ="config" class="card" style="display: none">
                <table id="discretizationTable" class="table" style=" table-layout: fixed; display: none">
                    <thead>
                        <tr>
                            <th style="width:20%" scope="col">Method</th>
                            <th style="width:8%" scope="col">PAA Window size</th>
                            <th style="width:8%" scope="col">Bins number</th>
                            <th style="width:8%" scope="col">Max gap</th>
                            <th style="width:15%" scope="col">States file</th>

                        </tr>
                    </thead>
                    <tbody id="discretizationTableBody"></tbody>
                </table>
                <div class="btn-group">
                    <button id="sendToDiscretizationBtn" type="button" class="btn btn-outline-warning" onclick="sendToDiscretization()">
                        <span class="fas fa-share-square"></span>
                        Send to Discretization
                    </button>
                </div>
            </div>
        </div>

    </div>


}
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header bg-primary" style="color:white">
                Previously Abstracted Datasets
            </div>
            <div class="card-body">
                <div>

                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th style="width:10%" scope="col">PAA Window size</th>
                            <th style="width:20%" scope="col">Method</th>
                            <th style="width:10%" scope="col">Bins number/States file</th>
                            <th style="width:10%" scope="col">Interpolation gap</th>
                            <th style="width:10%" scope="col">Status</th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var discretization in Model.Discretizations)
                        {
                            //var methodPathSplited = discretization.DownloadPath.Split('/');
                            //var methodParams = methodPathSplited[methodPathSplited.Length - 1].Split('_');

                        <tr>
                            <td>

                                @*@methodParams[2].Substring(0, methodParams[2].Length - 3)*@
                                @discretization.WindowSize
                            </td>
                            <td>

                                @*@methodParams[0]*@
                                @discretization.FullName
                            </td>
                            <td>

                                @*@methodParams[1].Substring(0, methodParams[1].Length - 4)*@
                                @discretization.BinsNumber
                            </td>
                            <td>

                                @*@methodParams[3].Substring(0, methodParams[3].Length - 7)*@
                                @discretization.MaxGap
                            </td>



                            <td>
                                @if (discretization.ParametersIsReady == "Ready")
                                {
                                <div>

                                    <a href="@Url.Action("GetDiscretizations", "Discretizations", new { id = discretization.DiscretizationID})" class="btn btn-sm btn-primary" style="background-color:#006400; color:white"> <span class="fas fa-download"> </span> Download</a>
                                </div>
                                }
                                else
                                {
                                    <div>
                                        <button id="downloadDatasetButton_New" title="Discretization In Progress" class="btn btn-sm btn-primary" type="button" disabled >
                                            <span class="fas"> </span> Hugoboting..
                                        </button>

                                    </div>
                                }
                            </td>

                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $.validator.setDefaults({
                ignore: []
            });
            $("#LoadingLabel").hide()
            $("#CategoryDropDown").val("")
            $("#BinsNumber").val("2")
            $("#WindowSize").val("1")
      
        });
    </script>
    <script>
        // Wait for the DOM to be ready
        $(function () {
            // Initialize form validation on the registration form.
            // It has the name attribute "registration"
            $('#UploadDatasetForm').validate({
                errorElement: 'span',
                errorClass: "text-danger field-validation-error",
                // Specify validation rules
                rules: {
                    // The key name on the left side is the name attribute
                    // of an input field. Validation rules are defined
                    // on the right side
                    firstname: "required",
                    lastname: "required",
                    email: {
                        required: true,
                        // Specify that email should be validated
                        // by the built-in "email" rule
                        email: true
                    },
                    BinsNumber: {
                        required: true,
                        digits: true,
                        number: true,
                        min: 2
                    },
                    MaxGap: {
                        required: true,
                        number: true,
                        min: -1
                    },


                    WindowSize: {
                        required: true,
                        number: true,
                        min: 1
                    },

                    Visiblity: {
                        required: true
                    }



                },
                // Specify validation error messages
                messages: {
                    firstname: "Please enter your firstname",
                    BinsNumber: { required: "Please enter the bins number", digits: "Must be an integer greater than 1", number: "Must be an integer greater than 1" },
                    MaxGap: { required: "Please enter an integer that is at least -1", digits: "Must be an integer ", number: "Must be an integer " },
                    DatasetName: { required: "Please specify a name for the dataset" },
                    Category: { required: "Please choose a category" },
                    Visiblity: { required: "Please choose visibliy for your dataset" },
                    Path: { required: "Please choose a dataset file to upload" },
                    VMap_file: { required: "Please choose a variable map file to upload" },
                    td4c_param: "Please select at least one scoring method",
                    WindowSize: "Please enter a windows size of at least 1",
                    abstraction_method: "Please select at least one abstraction method"

                },

                errorPlacement: function (error, element) {
                    if (element.attr("name") == "td4c_param") {
                        error.insertAfter(".td4c_error");
                    }
                    if (element.attr("name") == "sax_param") {
                        error.insertAfter(".sax_error");
                    }
                    else if (element.attr("name") == "abstraction_method") {
                        error.insertAfter("#showAbstractionMethodsButton");
                    }
                    else if (element.attr("name") == "VMap_file") {
                        error.insertAfter("#VMap_file_error")
                    }
                    else if (element.attr("name") == "Path") {
                        error.insertAfter("#Dataset_file_error")
                    }
                    else
                        error.insertAfter(element);
                },
                // Make sure the form is submitted to the destination defined
                // in the "action" attribute of the form when valid
                submitHandler: function (form) {
                    form.submit();
                }
            });
        });

    </script>

    <script>
        window.onload = function checkClass() {
            var methodNamesCellDropdownList = document.getElementById("abstractionMethodsDropdownList");
            var op = methodNamesCellDropdownList.options["TD4C"]
            var op1 = methodNamesCellDropdownList.options["TD4C1"]
            var op2 = methodNamesCellDropdownList.options["TD4C2"]
            if (@Model.Dataset.hasClass== 1) {
                op.disabled = false;
                op1.disabled = false;
                op2.disabled = false;
                op.title = "search set of cut-offs to abstract a variables into meaningfully different states for each class";
                op1.title = "search set of cut-offs to abstract a variables into meaningfully different states for each class";
                op2.title = "search set of cut-offs to abstract a variables into meaningfully different states for each class";
            }
        }

    </script>

    <script>
		var addedConfigurations = [];
		var knowledgeBasedConfigurations = [];
		var discretizationList = { "EQW": "Equal width", "EQF": "Equal frequency", "TD4C_Cosine": "TD4C_Cosine", "TD4C_Entropy": "TD4C_Entropy", "TD4C_KullbackLiebler": "TD4C_KullbackLiebler", "SAX": "SAX", "EXPERT": "EXPERT" };
		var distanceMeausreList = ["Cosine", "Entropy", "KullbackLiebler"]
		var visibilityList = ["Public", "Private"]
		var regularMethods = ["EQW", "EQF", "PERSIST", "BINARY", "KMEANS", "SAX"];
		var knowledgeBasedMethods = ["EXPERT"];
		var distanceMeasureMethods = ["TD4C"];
		var discretizationTable = document.getElementById('discretizationTable').getElementsByTagName('tbody')[0];

		var formdata = new FormData(); //FormData object

		function addConfiguration() {
			if ($("#UploadDatasetForm").valid()) {
                console.log("VALID")
                document.getElementById('config').style.display = "";
                document.getElementById('discretizationTable').style.display = "";
				var methodNamesCellDropdownList = document.getElementById("abstractionMethodsDropdownList");
				var selectedMethod = methodNamesCellDropdownList.options[methodNamesCellDropdownList.selectedIndex];
				var binsNumberCellInput = document.getElementById("BinsNumber");
				var maxGapCellInput = document.getElementById("MaxGap");
				var windowSizeCellInput = document.getElementById("WindowSize");
			
                var selectedDistanceMeasure = ""; 
                if (selectedMethod.value == "TD4C") {
                    var distanceMeasureList = selectedMethod.text.split("_");
                    selectedDistanceMeasure = distanceMeasureList[1];
                }

                if (distanceMeasureMethods.indexOf(selectedMethod.value) != -1) {
                    if (addedConfigurations.indexOf(selectedMethod.value + '/' + [binsNumberCellInput.value, selectedDistanceMeasure, maxGapCellInput.value, windowSizeCellInput.value].join('_')) == -1) {
						var methodRow = discretizationTable.insertRow(discretizationTable.rows.length);
						methodRow.setAttribute("id", "row_" + row_id);
                        var row_id = discretizationTable.rows.length;

						var methodNamesCell = methodRow.insertCell(0);
                        methodNamesCell.innerHTML = selectedMethod.text;

                        var windowSizeCell = methodRow.insertCell(1);
                        windowSizeCell.innerHTML = windowSizeCellInput.value;

						var binsNumberCell = methodRow.insertCell(2);
						binsNumberCell.innerHTML = binsNumberCellInput.value;

						var maxGapCell = methodRow.insertCell(3);
						maxGapCell.innerHTML = maxGapCellInput.value;




                        addedConfigurations.push(selectedMethod.value + '/' + [binsNumberCellInput.value, selectedDistanceMeasure, maxGapCellInput.value, windowSizeCellInput.value].join('_'))

					}
				}
				if (regularMethods.indexOf(selectedMethod.value) != -1) {
                    if (addedConfigurations.indexOf(selectedMethod.value + '/' + [binsNumberCellInput.value, maxGapCellInput.value, windowSizeCellInput.value].join('_')) == -1) {
						var methodRow = discretizationTable.insertRow(discretizationTable.rows.length);
						methodRow.setAttribute("id", "row_" + row_id);
                        var row_id = discretizationTable.rows.length;

						var methodNamesCell = methodRow.insertCell(0);
                        methodNamesCell.innerHTML = selectedMethod.text;

                        var windowSizeCell = methodRow.insertCell(1);
                        windowSizeCell.innerHTML = windowSizeCellInput.value;

						var binsNumberCell = methodRow.insertCell(2);
						binsNumberCell.innerHTML = binsNumberCellInput.value;

						var maxGapCell = methodRow.insertCell(3);
						maxGapCell.innerHTML = maxGapCellInput.value;



                        addedConfigurations.push(selectedMethod.value + '/' + [ binsNumberCellInput.value, maxGapCellInput.value, windowSizeCellInput.value].join('_'))
						var distanceMeasureCell = methodRow.insertCell(4);
					}
				}
				if (knowledgeBasedMethods.indexOf(selectedMethod.value) != -1) {
					var fileInput = document.getElementById('Path');

                    if (knowledgeBasedConfigurations.indexOf(selectedMethod.value + '/' + [maxGapCellInput.value, windowSizeCellInput.value, fileInput.files[i].name.replace(/_/g, '%')].join('_')) == -1) {
						var methodRow = discretizationTable.insertRow(discretizationTable.rows.length);
						methodRow.setAttribute("id", "row_" + row_id);
						var row_id = discretizationTable.rows.length;
						var methodNamesCell = methodRow.insertCell(0);
						methodNamesCell.innerHTML = selectedMethod.text;
						methodRow.insertCell(1);

						var statesFileCellInput = document.getElementById("Path1");



						var maxGapCell = methodRow.insertCell(2);
						maxGapCell.innerHTML = maxGapCellInput.value;

						var windowSizeCell = methodRow.insertCell(3);
						windowSizeCell.innerHTML = windowSizeCellInput.value;
						methodRow.insertCell(4);
						var statesFileCell = methodRow.insertCell(5);
						statesFileCell.innerHTML = statesFileCellInput.innerHTML;
						var fileInput = document.getElementById('Path');
						console.log(fileInput)
						//Iterating through each files selected in fileInput
						console.log(fileInput.files)
						for (i = 0; i < fileInput.files.length; i++) {
							//Appending each file to FormData object
							console.log(fileInput.files[i].name)
							console.log(formdata)
							formdata.append(fileInput.files[i].name.replace(/_/g, '%'), fileInput.files[i]);

                            knowledgeBasedConfigurations.push(selectedMethod.value + '/' + [maxGapCellInput.value, windowSizeCellInput.value, fileInput.files[i].name.replace(/_/g, '%')].join('_'));
							console.log(formdata)
						}
						console.log(formdata)
						for (var p of formdata) {
							console.log(p);
						}
					}


				}
				console.log(addedConfigurations)
				console.log(knowledgeBasedConfigurations)

			}


		}
		function methodChanged() {
			var methodNamesCellDropdownList = document.getElementById("abstractionMethodsDropdownList");
			var selectedMethod = methodNamesCellDropdownList.options[methodNamesCellDropdownList.selectedIndex];
			var selectedMethodValue = selectedMethod.value;

			var binsNumberCellInput = document.getElementById("binsNumberDiv");
			var maxGapCellInput = document.getElementById("maxGapDiv");
			var windowSizeCellInput = document.getElementById("windowSizeDiv");
			var statesFileInput = document.getElementById("statesFileDiv");

			if (regularMethods.indexOf(selectedMethodValue) != -1) {
				binsNumberCellInput.style.display = 'block';
				maxGapCellInput.style.display = 'block';
				windowSizeCellInput.style.display = 'block';
				statesFileInput.style.display = 'none';

			}
			else {
				if (distanceMeasureMethods.indexOf(selectedMethodValue) != -1) {
					binsNumberCellInput.style.display = 'block';
					maxGapCellInput.style.display = 'block';
					windowSizeCellInput.style.display = 'block';
					statesFileInput.style.display = 'none';

				}
				if (knowledgeBasedMethods.indexOf(selectedMethodValue) != -1) {
					statesFileInput.style.display = 'block';
					binsNumberCellInput.style.display = 'none';
					maxGapCellInput.style.display = 'block';
					windowSizeCellInput.style.display = 'block';

				}
			}

		}

		function sendToDiscretization() {
			var discretizationTable = document.getElementById('discretizationTable').getElementsByTagName('tbody')[0];
			console.log(discretizationTable.rows.length)
			if (discretizationTable.rows.length >= 1) {
				document.getElementById("sendToDiscretizationBtn").disabled = true;
			document.getElementById("sendingText").innerHTML = "Sending to discretization, you wiil be redirected to the details page";



				formdata.append("Methods", addedConfigurations);
				formdata.append("ID", @Model.DatasetID);
				formdata.append("KnowledgedBasedMethods", knowledgeBasedConfigurations )
			var objToSend = { id: @Model.DatasetID, methods: addedConfigurations }
				$.ajax({

					type: "POST",
					data: formdata,
				processData: false, // Not to process data
				url: '@Url.Action("SendToDiscretization")',

				cache: false,
				contentType: false,
				processData: false,
				success: function (response) {
					console.log(response)
					window.location.href ="@Url.Action("Edit", "Discretizations", new { id = @Model.DatasetID })";


				},
                    error: function (response) {
                        alert(response);  
				}

			});
			}

		}
    </script>
    <script>
        var discretizationList = { "EQW": "Equal width", "EQF": "Equal frequency", "TD4C": "TD4C", "SAX": "SAX", "EXPERT": "EXPERT" };
        var distanceMeausreList = ["Cosine", "Entropy", "KullbackLiebler"]
        var visibilityList = ["Public", "Private"]
        var discretizationTable = document.getElementById('discretizationTable').getElementsByTagName('tbody')[0];
        function addMethodRow() {


            // Insert a row in the table at the last row
            var methodRow = discretizationTable.insertRow(discretizationTable.rows.length);
            var row_id = discretizationTable.rows.length;
            methodRow.setAttribute("id", "row_" + row_id);
            // Insert a cell in the row at index 0
            var methodNamesCell = methodRow.insertCell(0);
            var methodNamesCellDropdownList = document.createElement("select");
            methodNamesCellDropdownList.setAttribute("class", "form-control")
            methodNamesCellDropdownList.setAttribute("id", "methodNameRow_" + row_id);
            methodNamesCellDropdownList.setAttribute("onChange", "changeRow(\"methodNameRow_" + row_id + "\")");
            methodNamesCell.setAttribute("scope", "col")
            methodNamesCell.appendChild(methodNamesCellDropdownList);
            for (var methodKey in discretizationList) {
                var methodNameOption = document.createElement("option");
                methodNameOption.innerHTML = discretizationList[methodKey];
                methodNameOption.value = methodKey;
                methodNamesCellDropdownList.add(methodNameOption, null);
            }

            var binsNumberCell = methodRow.insertCell(1);
            var binsNumberCellInput = document.createElement("input");
            binsNumberCellInput.type = "number";
            binsNumberCellInput.setAttribute("class", "form-control")
            binsNumberCellInput.setAttribute("name", "BinsNumber")
            binsNumberCell.setAttribute("style", "width: 20 %")
            binsNumberCellInput.setAttribute("style", "width: 20 %")
            binsNumberCell.appendChild(binsNumberCellInput);


            var maxGapCell = methodRow.insertCell(2);
            var maxGapCellInput = document.createElement("input");
            maxGapCellInput.type = "number";
            maxGapCellInput.setAttribute("class", "form-control")
            maxGapCell.appendChild(maxGapCellInput);


            var windowSizeCell = methodRow.insertCell(3);
            var windowSizeCellInput = document.createElement("input");
            windowSizeCellInput.type = "number";
            windowSizeCellInput.setAttribute("class", "form-control")
            windowSizeCell.appendChild(windowSizeCellInput);
            windowSizeCellInput.setAttribute("id", "windowSize_" + row_id + ")")

            var distanceMeasureCell = methodRow.insertCell(4);

            for (var distanceMeasureKey in distanceMeausreList) {
                var distanceMeasureOption = document.createElement("option");
                distanceMeasureOption.innerHTML = distanceMeausreList[distanceMeasureKey];
                distanceMeasureOption.value = methodKey;

            }
            var statesFileCell = methodRow.insertCell(5);
            var statesFileCellInput = document.createElement("input");
            statesFileCellInput.type = "file";
            statesFileCellInput.setAttribute("class", "")
            statesFileCell.appendChild(statesFileCellInput);
            statesFileCell.setAttribute("id", "statesFile_" + row_id + ")")
            var methodNameDropdownListSelectedValue = methodNamesCellDropdownList.options[methodNamesCellDropdownList.selectedIndex].value;
            console.log(methodNameDropdownListSelectedValue)
            changeRow("methodNameRow_" + row_id)


            var visibilityCell = methodRow.insertCell(6);
            var visibilityCellDropdownList = document.createElement("select");
            visibilityCellDropdownList.setAttribute("class", "form-control");
            visibilityCellDropdownList.setAttribute("id", "visibility_" + row_id)

            visibilityCell.appendChild(visibilityCellDropdownList);
            for (var distanceMeasureKey in visibilityList) {
                var distanceMeasureOption = document.createElement("option");
                distanceMeasureOption.innerHTML = visibilityList[distanceMeasureKey];
                distanceMeasureOption.value = methodKey;
                visibilityCellDropdownList.add(distanceMeasureOption, null);
            }


        }
    </script>


    <script>
        $('#hide').change(function () {
            $('#uploadVmap').text($("#hide").val().split("\\").slice(-1)[0]);

        });
    </script>
    <script>
        $('#Path').change(function () {
            $('#Path1').text($("#Path").val().split("\\").slice(-1)[0]);
            $("#Upload").prop("disabled", false);


        });
    </script>
    <script>
        function showMethods() {
            if ($("#methodsCheckboxes").css("display") == 'none') {
                $("#methodsCheckboxes").show();

            }
            else {
                $("#methodsCheckboxes").hide();
            }
        }
    </script>

    <script>
        function showParameters(methodName) {
            var tag = "#" + methodName + "_parameters"
            if ($(tag).css("display") == 'none') {
                $(tag).show();

            }
            else {
                $(tag).hide();
            }
        }
    </script>


    <script>
        $('#CategoryDropDown').change(function () {
            var category = $("#CategoryDropDown option:selected").text();
            if (category == 'Other') {
                $("#CategoryOtherEdit").show();
                $("#CategoryDropDown").attr("name", "None")
            }
            else {
                //if user select 'other' and later select something else, you should hide textbox
                $("#CategoryOtherEdit").hide();
                $("#CategoryDropDown").attr("name", "Category")
            }

        });
    </script>


    <script>
        $(function () {
            $("input[name='abstraction_method']").change(function () {
                var total = $("#methodsCheckboxes").find('input[name="abstraction_method"]:checked').length;
                console.log(total);
                if (document.getElementById('expert').checked && total == 1) {
                    $("#binsNumberDiv").hide();
                }
                else {
                    $("#binsNumberDiv").show();
                }
            });
        });

    </script>
    <script>
        $(function () {
            $("input[name='abstraction_method']").change(function () {
                var total = $("#methodsCheckboxes").find('input[name="abstraction_method"]:checked').length;
                console.log(total);
                if (document.getElementById('expert').checked && total == 1) {
                    $("#BinsNumber").val(2)
                    $("#binsNumberDiv").hide();
                }
                else {
                    $("#BinsNumber").val("")
                    $("#binsNumberDiv").show();
                }
            });
        });
        function hideBins() {
            var total = $("#methodsCheckboxes").find('input[name="abstraction_method"]:checked').length;
            console.log(total);
            if (document.getElementById('expert').checked && total == 1) {
                $("#binsNumberDiv").hide();
            }
            else {
                $("#binsNumberDiv").show();
            }
        }
    </script>
    <script>
        $('#UploadDatasetForm').submit(function () {
            console.log($(this).valid())
            if ($(this).valid()) {
                $(this).find(':submit').attr('disabled', 'disabled');
                if (document.getElementById("Path").files.length != 0) {
                    $("#LoadingLabel").show()

                    var abstractMethodsFieldset = document.getElementById("methodsCheckboxes");
                    var abstractMethodsFieldsetTags = ['input'];
                    var fields = abstractMethodsFieldset.getElementsByTagName("input");

                    var methodsString = "";
                    console.log(methodsString);
                    for (var fieldi = fields.length; fieldi-- > 0;) {
                        var method = fields[fieldi];
                        if (method.checked) {
                            methodsString = methodsString.concat(fields[fieldi].value + ";");
                        }
                    }
                    console.log(methodsString);
                    methodsString = methodsString.slice(0, -1);
                    $("#AbstractionMethods").val(methodsString);
                    $("#AbstractionMethods").text(methodsString);

                }

                else {
                    ("input[type=submit]").attr("disabled", "disabled");
                }

            }
        });
    </script>
    <script>
        function setDatasetName() {
            console.log("Hi")
            $("#DatasetName").val($("#Path1").text());

        }
    </script>
    <script>
        function downloadDatasets() {

            var datasetRecordsChecked = [];
			var discretizationRecordsChecked = [];
			var karmaLegoRecordsChecked = [];
            var datasetRecords = document.getElementsByName("DatasetsRecords");
            var discretizationRecords = document.getElementsByName("DiscretizationRecords");
			var karmaLegoRecords = document.getElementsByName("KarmaLegoRecords");

            for (var i = 0; i < discretizationRecords.length; i++) {
                if (discretizationRecords[i].checked) {
                    discretizationRecordsChecked.push(discretizationRecords[i].value);
                }
			}



            $.ajax({
                type: 'POST',
                url: '@Url.Action("DownloadDiscretizations")',
                datatype: 'JSON',
                data: {
					discretizationIdList: discretizationRecordsChecked
                },
                success: function (returnValue) {

					window.location = "/hugobot/Discretizations/GetDiscretizations?parameters=" + returnValue;
                },
                error: function () {
                    alert("Oops! Something went wrong");
                }
            });


        }

    </script> 

   <script>
       function downloadDataset(discretizationID) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("DownloadDiscretization")',
                datatype: 'JSON',
                data: {
                    Id: discretizationID
                },
                success: function (returnValue) {

					window.location = "/hugobot/Discretizations/GetDiscretizations?parameters=" + returnValue;
                },
                error: function () {
                    alert("Oops! Something went wrong");
                }
            });


        }

    </script>


}
